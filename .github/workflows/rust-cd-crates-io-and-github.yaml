name: CD

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'

  workflow_dispatch: # Run with Run Workflow button in GitHub Action Job, set debug_enabled=true for interactive ssh session.
    inputs:
      debug_enabled:
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false

  workflow_call:
    inputs:
      COPYRIGHT_YEARS:
        required: true
        type: string
      DESCRIPTION:
        required: true
        type: string
      HOMEPAGE:
        required: true
        type: string
      MAINTAINER:
        required: true
        type: string
      PROJECT_NAME:
        required: true
        type: string
    secrets:
      CARGO_API_KEY:
        required: true
jobs:
  common-assertions:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cargo version matches tag
        if: github.event_name == 'push'
        run: |
          function ok() {
            echo -e "\e[1;32mOK\e[0m"
          }
          function err() {
            echo -e "\e[1;31m${@}\e[0m" >&2
            exit 1
          }

          CRATE_VERSION=$(cat Cargo.toml | grep -e "^version" | head -1 | cut -d '=' -f2 | sed -e "s/ //" -e "s/\"//g")
          [[ $GITHUB_REF == *"refs/tags"* ]] && TAG=$GITHUB_REF || err "Cannot determine git tag."
          TAG=${TAG/refs\/tags\//}
          [ "$CRATE_VERSION" = "$TAG" ] && ok "OK" || err "ERROR: Crate version does not match the git (release) tag."

  publish-to-github:
    name: Building ${{ matrix.job.target }}
    runs-on: ${{ matrix.job.os }}
    needs:
      - common-assertions
    strategy:
      matrix:
        job:
          - { os: ubuntu-latest , target: x86_64-unknown-linux-gnu,    use-cross: false }
          - { os: ubuntu-latest , target: x86_64-unknown-linux-musl,   use-cross: false }
          - { os: ubuntu-latest,  target: aarch64-unknown-linux-gnu,   use-cross: true }

    steps:
      - name: Installing Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Install required dependencies
        env:
          RUSTFLAGS: "-C target-feature=-crt-static"
        shell: bash
        run: |
          if [[ ${{ matrix.job.target }} == arm-unknown-linux-gnueabihf ]]; then
              sudo apt update
              sudo apt-get install -y binutils-arm-linux-gnueabihf
          fi
          if [[ ${{ matrix.job.target }} == aarch64-unknown-linux-gnu ]]; then
              sudo apt update
              sudo apt-get install -y binutils-aarch64-linux-gnu
          fi
          if [[ ${{ matrix.job.target }} == x86_64-unknown-linux-musl ]]; then
              rustup target add x86_64-unknown-linux-musl
              sudo apt update
              sudo apt install musl-tools
          fi

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Cargo build
        env:
          MACOSX_DEPLOYMENT_TARGET: 10.7
        uses: actions-rs/cargo@v1
        with:
          command: build
          use-cross: ${{ matrix.job.use-cross }}
          args: --release --target ${{ matrix.job.target }}

      - name: Get pack script
        shell: bash
        run: |
          wget https://raw.githubusercontent.com/mihaigalos/config/main/.github/workflows/rust-pack.sh -O .github/workflows/rust-pack.sh
          chmod +x .github/workflows/rust-pack.sh

      - name: Packaging final binary
        shell: bash
        env:
          COPYRIGHT_YEARS: ${{ inputs.COPYRIGHT_YEARS }}
          DESCRIPTION: ${{ inputs.DESCRIPTION }}
          HOMEPAGE: ${{ inputs.HOMEPAGE }}
          MAINTAINER: ${{ inputs.MAINTAINER }}
          PROJECT_NAME: ${{ inputs.PROJECT_NAME }}
          TARGET: ${{ matrix.job.target }}
          OS_NAME: ${{ matrix.job.os }}
        run: ./.github/workflows/rust-pack.sh

      - name: Releasing assets
        if: github.event_name == 'push'
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ inputs.PROJECT_NAME }}-*-${{ matrix.job.target }}.*
            ${{ inputs.PROJECT_NAME }}*.deb
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-to-cargo:
    name: Publishing to Cargo
    if: github.event_name == 'push'
    needs:
      - publish-to-github
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: publish
          args: --token ${{ secrets.CARGO_API_KEY }} --allow-dirty
